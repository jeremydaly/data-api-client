name: Publish to NPM

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty to use package.json version)'
        required: false
        type: string

jobs:
  test-and-publish:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Build project
        run: npm run build

      - name: Run unit tests
        run: npm test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-Publish

      - name: Run MySQL integration tests
        env:
          MYSQL_RESOURCE_ARN: ${{ secrets.MYSQL_RESOURCE_ARN }}
          MYSQL_SECRET_ARN: ${{ secrets.MYSQL_SECRET_ARN }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: npx vitest run integration-tests/mysql.int.test.ts

      - name: Run PostgreSQL integration tests
        env:
          POSTGRES_RESOURCE_ARN: ${{ secrets.POSTGRES_RESOURCE_ARN }}
          POSTGRES_SECRET_ARN: ${{ secrets.POSTGRES_SECRET_ARN }}
          POSTGRES_DATABASE: ${{ secrets.POSTGRES_DATABASE }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: npx vitest run integration-tests/postgres.int.test.ts

      - name: Update version (if specified)
        if: github.event.inputs.version != ''
        run: npm version ${{ github.event.inputs.version }} --no-git-tag-version

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release (if version specified)
        if: github.event.inputs.version != ''
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: Release v${{ github.event.inputs.version }}
          draft: false
          prerelease: false
